{
  "releaseName": "coinpush",
  "name": "coinpush",
  "version": "0.0.1-alpha-4",
  "email": "kewin@frontend-freelance.com",
  "author": "Kewin Brandsma",
  "main": "index.js",
  "private": false,
  "license": "CC-BY-NC-ND-4.0",
  "description": "Javascript Trading Client and Server",
  "repository": {
    "type": "git",
    "url": "https://github.com/DutchKevv/CoinPush.git"
  },
  "keywords": [
    "CoinPush",
    "Stock",
    "Forex",
    "Trade",
    "Trading",
    "Node",
    "Trading",
    "NodeJS"
  ],
  "scripts": {
    "get-ssl-cert-prod": "docker run -v $(PWD}/server-nginx/ssl:/etc/letsencrypt -e http_proxy=$http_proxy -e domains=\"www.coinpush.app,coinpush.app,jenkins.coinpush.app\" -e email=\"kewin@frontend-freelance.com\" -p 80:80 -p 443:443  --rm pierreprinetti/certbot:latest --expand",
    "get-ssl-cert-dev": "docker run -v C:/Users/User/Projects/CoinPush/server-nginx/ssl:/etc/letsencrypt -e http_proxy=$http_proxy -e domains=\"localhost\" -e email=\"kewin@frontend-freelance.com\" -p 80:80 -p 443:443  --rm pierreprinetti/certbot:latest --expand",
    "copy-ssl-cert-prod": "cp -r /etc/letsencrypt/ ./server-nginx/ssl && chmod -R 777 ./server-nginx/ssl/",
    "copy-ssl-cert-dev": "cp -r /etc/letsencrypt/ ./server-nginx/ssl",
    "build-all": "docker-compose build",
    "build-client": "docker-compose build client",
    "build-client-app": "docker-compose build client-app",
    "build-jenkins": "docker-compose build jenkins",
    "build-server": "docker-compose build mongodb redis gateway notify user event cache comment",
    "build-nginx": "docker-compose build nginx",
    "build-prod-all": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml build",
    "build-prod-client": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml build client",
    "build-prod-jenkins": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml build jenkins",
    "build-prod-server": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml build redis gateway notify user event cache comment mongodb",
    "build-prod-nginx": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml build nginx",
    "start": "npm run d-up-all",
    "start-server": "docker-compose up -d nginx redis gateway notify cache event comment user mongodb && npm run d-log-server",
    "start-client": "docker-compose up client",
    "start-jenkins": "docker-compose up jenkins",
    "start-nginx": "docker-compose up -d nginx",
    "start-mongo": "docker-compose up -d mongodb",
    "restart-server": "npm run kill-server && npm run start-server",
    "prod-client": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up client",
    "prod-client2": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up client && npm run inc-build-number",
    "prod-jenkins": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d jenkins",
    "prod-server": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d redis gateway notify user event cache comment mongodb",
    "prod-nginx": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d nginx",
    "prod-mongo": "docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d mongodb",
    "kill-server": "docker-compose kill redis gateway notify user event cache comment mongodb nginx",
    "kill-nginx": "docker-compose kill nginx",
    "d-rm-all": "docker-compose rm -f",
    "d-rm-server": "npm run d-kill-server && docker-compose rm gateway notify user event cache comment",
    "d-rmi-none": "docker rmi $(docker images --filter 'dangling=true' -q --no-trunc)",
    "d-rmi-all": "docker rmi -f $(docker images -q)",
    "d-rmi-dangling": "docker rmi $(sudo docker images --filter \"dangling=true\" -q --no-trunc)",
    "d-mongo-shell": "docker exec -it mongodb mongo",
    "d-kill": "docker-compose kill",
    "d-build": "docker-compose build",
    "d-up-all": "docker-compose up",
    "d-prune": "docker system prune",
    "d-log-all": "docker-compose logs --tail=30 -f",
    "d-log-server": "docker-compose logs --tail=10 -f nginx notify user event cache comment gateway",
    "d-log-nginx": "docker-compose logs --tail=20 -f nginx",
    "d-log-mongo": "docker-compose logs --tail=20 -f mongodb",
    "clean-client": "cd ./scripts/npm && sh ./clean-modules.sh",
    "clean-app": "cd ./scripts/npm && sh ./clean-modules.sh",
    "clean-server": "cd ./scripts/npm && sh ./clean-modules.sh",
    "clean-db": "",
    "clean-candles": "docker exec -it mongodb bash -c 'mongo < myFile.js'",
    "clean-npm-modules": "cd ./scripts/npm && node --experimental-modules clean-modules.mjs",
    "update-npm-modules": "cd ./scripts/npm && sh ./update-modules.sh",
    "install-npm-modules": "cd ./scripts/npm && node --experimental-modules install-modules.mjs",
    "inc-build-number": "node ./scripts/inc-build-number.js",
    "prepare-dev": "cd ./scripts && node --experimental-modules prepare_dev.mjs"
  },
  "dependencies": {}
}
